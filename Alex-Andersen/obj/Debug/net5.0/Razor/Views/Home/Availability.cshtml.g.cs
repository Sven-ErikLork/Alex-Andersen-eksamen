#pragma checksum "C:\Users\Sven-Erik\Documents\GitHub\AlexAndersen\Alex-Andersen\Views\Home\Availability.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b3177ac2ca447f0a7543dfebca47b2ccb80cd2ee"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Availability), @"mvc.1.0.view", @"/Views/Home/Availability.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Sven-Erik\Documents\GitHub\AlexAndersen\Alex-Andersen\Views\_ViewImports.cshtml"
using Alex_Andersen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Sven-Erik\Documents\GitHub\AlexAndersen\Alex-Andersen\Views\_ViewImports.cshtml"
using Alex_Andersen.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b3177ac2ca447f0a7543dfebca47b2ccb80cd2ee", @"/Views/Home/Availability.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"622c26a949408575ba1a903da5706303dca9fcad", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Availability : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 4 "C:\Users\Sven-Erik\Documents\GitHub\AlexAndersen\Alex-Andersen\Views\Home\Availability.cshtml"
  
    int eventCount = ViewBag.Events.Count;

    List<Availability> eventData = new List<Availability>();


    foreach (var data in ViewBag.Events) {
        Availability thisEvent = new Availability();

        thisEvent.AvailabilityId = data.AvailabilityId;
        thisEvent.StartDate = data.StartDate;
        thisEvent.EndDate = data.EndDate;
        thisEvent.AvailabilityStatus = data.AvailabilityStatus;
        /* thisEvent.fullDay = data.fullDay; */

        eventData.Add(thisEvent);
    }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<script type=""text/javascript"">
    /* 
    //create list of objects
    let eventCount = '(AT-SIGN)eventCount';
    let userEvents = [];

    for (let i = 0; eventCount > i; i++) {
        let eventdata = {
            start: '2021-02-02',
            end: '2021-02-03',
            allDay: 'true',
            display: 'background',
            classNames: ['unavailable'],
            extendedProps: {
                fullday: true,
                timeStart: 'hello',
                timeEnd: 'hello'
            }
        };
        userEvents.push(eventdata);
    }*/

        document.addEventListener('DOMContentLoaded', function () {
            var calendarEl = document.getElementById('calendar');
            //var popupText = document.getElementById(""dateSelected"");
            var popup_add = document.getElementById(""add-availability"");
            var popup_edit = document.getElementById(""edit-availability"");
            var blackBG = document.getElementById(""blackBG"");
      ");
            WriteLiteral(@"      var switchAdd = document.getElementById(""switch-for-add"");
            var switchEdit = document.getElementById(""switch-for-edit"");

            var calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                firstDay: 1,
                selectable: true,
                //businessHours: true,
                //nextDayThreshold:""00:00:00"",
                locale: 'DK',
                longPressDelay: 1,
                nextDayThreshold: '00:00:00',
                dayMaxEvents: true, // allow ""more"" link when too many events
                eventTextColor: 'white',

                events: [
                    
                    {
                        start: '2021-12-10',
                        end: '2021-12-15',
                        classNames: ['available'],
                        display: 'background',
                        extendedProps: {
                            fullday: false,
                            t");
            WriteLiteral(@"imeStart: '11:00:00',
                            timeEnd: '15:00:00'
                        },
                        allDay: true
                        // allDay set to true to show background-events on calendar in month gridview. Stupid.
                        // Because of that, have to save timeslots in extendedprops
                    },
                    {
                        start: '2021-12-19',
                        end: '2021-12-21',
                        display: 'background',
                        classNames: ['unavailable'],
                        extendedProps: {fullday: true},
                        allDay: true
                    }
                ],
                select: function (info) {
                    allEvents = calendar.getEvents();
      
                    let thisStart = Date.parse(info.start);
                    let thisEnd = Date.parse(info.end);
                    let eventStart = 0;
                    let eventEnd = 0;
        ");
            WriteLiteral(@"            let eventFound = -1;

                    for (let i = 0; allEvents.length > i; i++) {
                        eventStart = Date.parse(allEvents[i].startStr);
                        eventEnd = Date.parse(allEvents[i].endStr);

                        if (thisStart >= eventStart && thisStart < eventEnd) {
                            eventFound = i;
                        } else if (thisEnd >= eventStart && thisEnd < eventEnd) {
                            eventFound = i;
                        }
                    }
                    console.log(eventFound);

                    if (eventFound >= 0) {
                        FillEditPopup(eventFound);
                    } else {
                        FillAddPopup(info.startStr, info.endStr);
                    }

                }, //select function end

                dateClick: function (info) { 
                    allEvents = calendar.getEvents();

                    let thisDate = Date.parse(info.dateStr);");
            WriteLiteral(@"
                    let eventStart = 0;
                    let eventEnd = 0;
                    let eventFound = -1;

                    for (let i = 0; allEvents.length > i; i++) {
                        eventStart = Date.parse(allEvents[i].startStr);
                        eventEnd = Date.parse(allEvents[i].endStr);
                        //Check if the date clicked is belong to any event. If yes, save the specific event found
                        if (thisDate >= eventStart && thisDate < eventEnd) {
                            eventFound = i;
                        }
                    }

                    if (eventFound >= 0) {
                        FillEditPopup(eventFound);
                    } else {
                        FillAddPopup(info.dateStr);
                    }
                } //dateClick function end


            });

            //Cancel/Delete/Save button-clicks in popups
            //ADD popup
            document.getElementById(""cancel-add"")");
            WriteLiteral(@".addEventListener(""click"", function () {
                popup_add.style.display = ""none"";
                blackBG.style.display = ""none"";
            });
            document.getElementById(""save-add"").addEventListener(""click"", function () {
                popup_add.style.display = ""none"";
                blackBG.style.display = ""none"";
            });
            //EDIT popup
            document.getElementById(""cancel-edit"").addEventListener(""click"", function () {
                popup_edit.style.display = ""none"";
                blackBG.style.display = ""none"";
            });
            document.getElementById(""delete-edit"").addEventListener(""click"", function () {
                popup_edit.style.display = ""none"";
                blackBG.style.display = ""none"";
            });
            document.getElementById(""save-edit"").addEventListener(""click"", function () {
                popup_edit.style.display = ""none"";
                blackBG.style.display = ""none"";
            });


 ");
            WriteLiteral(@"           // Change input fields when switch turn on/off for the ADD popup
            switchAdd.addEventListener('change', (e) => {
                if (e.currentTarget.checked) {
                    document.getElementById('day-timeslots').style.display = 'none';
                    document.getElementById('whole-day').style.display = 'block';
                } else {
                    document.getElementById('whole-day').style.display = 'none';
                    document.getElementById('day-timeslots').style.display = 'block';
                }
            });

            // Change input fields when switch turn on/off for the EDIT popup
            switchEdit.addEventListener('change', (e) => {
                if (e.currentTarget.checked) {
                    document.getElementById('day-timeslots-edit').style.display = 'none';
                    document.getElementById('whole-day-edit').style.display = 'block';
                } else {
                    document.getElementById('w");
            WriteLiteral(@"hole-day-edit').style.display = 'none';
                    document.getElementById('day-timeslots-edit').style.display = 'block';
                }
            });

            function FillEditPopup(eventID) {
                thisEvent = calendar.getEvents()[eventID];
                let startTime = '00:00';
                let endTime = '00:00';

                //if event has timeslots, load them
                if (thisEvent.extendedProps.fullday == false) {
                    startTime = thisEvent.extendedProps.timeStart;
                    endTime = thisEvent.extendedProps.timeEnd;
                }

                //fill the input fields

                document.getElementById(""date-start-edit"").setAttribute(""value"", thisEvent.startStr + 'T' + startTime);
                document.getElementById(""date-end-edit"").setAttribute(""value"", thisEvent.endStr + 'T' + endTime);

                document.getElementById(""date-start-edit-whole"").setAttribute(""value"", thisEvent.startStr);
 ");
            WriteLiteral(@"               document.getElementById(""date-end-edit-whole"").setAttribute(""value"", thisEvent.endStr);

                //set switch to correct setting
                if (thisEvent.classNames.includes(""available"")) {
                    document.getElementById(""edit-available"").checked = true;
                } else {
                    document.getElementById(""edit-unavailable"").checked = true;
                }

                //show the edit popup
                popup_edit.style.display = ""block"";
                popup_add.style.display = ""none"";
                blackBG.style.display = ""block"";
                
            }
            function FillAddPopup(startDate, endDate = 0) {
                document.getElementById(""date-start"").setAttribute(""value"", startDate + ""T08:00:00"");
                document.getElementById(""date-start-whole"").setAttribute(""value"", startDate);
                if (endDate) {
                    document.getElementById(""date-end"").setAttribute(""value"", ");
            WriteLiteral(@"endDate + ""T16:00:00"");
                    document.getElementById(""date-end-whole"").setAttribute(""value"", endDate);
                } else {
                    document.getElementById(""date-end"").setAttribute(""value"", startDate + ""T16:00:00"");
                    document.getElementById(""date-end-whole"").setAttribute(""value"", startDate);
                }

                //Show the add popup
                popup_add.style.display = ""block"";
                popup_edit.style.display = ""none"";
                blackBG.style.display = ""block"";
            }

            calendar.render();
        });
</script>
<div id=""calendar-wrapper"">
    <div id=""blackBG"">
        <div id=""add-availability"" class=""roundedBox popup"">
            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "b3177ac2ca447f0a7543dfebca47b2ccb80cd2ee14366", async() => {
                WriteLiteral(@"
                <!--ADD AN EVENT -->
                <h3>Sæt rådighed</h3>

                <div class=""radio-group"">
                    <label for=""pick-available"">
                        <input type=""radio"" id=""pick-available"" name=""availability"" />
                        Available
                    </label>
                    <br />
                    <label for=""pick-unavailable"">
                        <input type=""radio"" id=""pick-unavailable"" name=""availability"" />
                        Unavailable
                    </label>
                </div>

                <div class=""timeslots"">
                    <label for=""switch-for-add"">Hele dage</label>
                    <label class=""switch"">
                        <input type=""checkbox"" name=""switch-for-add"" checked=""checked"" id=""switch-for-add"" />
                        <span class=""slider""></span>
                    </label>
                </div>

                <div id=""whole-day"">
                    <la");
                WriteLiteral(@"bel for=""date-start-whole"">Fra</label>
                    <input type=""date"" id=""date-start-whole"" name=""date-start-whole"" /><br />

                    <label for=""date-end-whole"">Til</label>
                    <input type=""date"" id=""date-end-whole"" name=""date-end-whole"" />
                </div>

                <div id=""day-timeslots"">
                    <label for=""date-start"">Fra</label>
                    <input type=""datetime-local"" id=""date-start"" name=""date-start"" /><br />

                    <label for=""date-end"">Til</label>
                    <input type=""datetime-local"" id=""date-end"" name=""date-end"" />
                </div>
                <div class=""button-group"">
                    <button id=""cancel-add"" class=""cancel"">Annuller</button>
                    <button id=""save-add"" class=""save"">Tilføj</button>
                </div>
            ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n        </div>\r\n        <div id=\"edit-availability\" class=\"roundedBox popup\">\r\n            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "b3177ac2ca447f0a7543dfebca47b2ccb80cd2ee17729", async() => {
                WriteLiteral(@"
                <!--EDIT AN EVENT -->
                <h3>Rediger periode</h3>

                <input type=""text"" id=""id-edit-event"" name=""id-edit-event"" />

                <div class=""radio-group"">
                    <label for=""edit-available"">
                        <input type=""radio"" id=""edit-available"" name=""availability-edit"" />
                        Available
                    </label>
                    <br />
                    <label for=""edit-unavailable"">
                        <input type=""radio"" id=""edit-unavailable"" name=""availability-edit"" />
                        Unavailable
                    </label>
                </div>

                <div class=""timeslots"">
                    <label for=""switch-for-edit"">Hele dage</label>
                    <label class=""switch"">
                        <input type=""checkbox"" name=""switch-for-edit"" checked=""checked"" id=""switch-for-edit"" />
                        <span class=""slider""></span>
                   ");
                WriteLiteral(@" </label>
                </div>
                <div id=""whole-day-edit"">
                    <label for=""date-start-edit-whole"">Fra</label>
                    <input type=""date"" id=""date-start-edit-whole"" name=""date-start-edit-whole"" /><br />

                    <label for=""date-end-edit-whole"">Til</label>
                    <input type=""date"" id=""date-end-edit-whole"" name=""date-end-edit-whole"" />
                </div>
                <div id=""day-timeslots-edit"">
                    <label for=""date-start-edit"">Fra</label>
                    <input type=""datetime-local"" id=""date-start-edit"" name=""date-start-edit"" /><br />

                    <label for=""date-end-edit"">Til</label>
                    <input type=""datetime-local"" id=""date-end-edit"" name=""date-end-edit"" />
                </div>

                <div class=""button-group"">
                    <button id=""cancel-edit"" class=""cancel"">Annuller</button>
                    <button id=""delete-edit"" class=""delete"">Slet</butt");
                WriteLiteral("on>\r\n                    <button id=\"save-edit\" class=\"save\">Gem</button>\r\n                </div>\r\n            ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
        </div>
    </div>
    
    <div id='calendar'></div>
    <div class=""calendar-tooltip"">
        <div class=""available"">
            Available
        </div>
        <div class=""unavailable"">
            Unavailable
        </div>
    </div>
</div>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
